{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"site-canvas\",\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.message = $event),\n    placeholder: \"Type something...\",\n    autofocus: \"\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.message]]), _createElementVNode(\"span\", null, _toDisplayString(_ctx.message), 1\n  /* TEXT */\n  )])]);\n}","map":{"version":3,"mappings":";;EAEOA,KAAK,EAAC;EAAcC,EAAE,EAAC;;;EACvBD,KAAK,EAAC;;;uBADXE,oBAKI,KALJ,cAKI,CAJJC,oBAGM,KAHN,cAGM,iBAFJA,oBAAmE,OAAnE,EAAmE;+DAAnDC,eAAOC,OAA4C;IAA1CC,WAAW,EAAC,mBAA8B;IAAVC,SAAS,EAAT;EAAU,CAAnE;;EAAA,kBAAgBH,eAEZ,EADJD,oBAAwB,MAAxB,EAAwB,IAAxB,EAAwBK,iBAAhBJ,YAAgB,CAAxB,EAAe;EAAA;EAAf,CACI,CAHN,CAII,CALJ","names":["class","id","_createElementBlock","_createElementVNode","_ctx","$event","placeholder","autofocus","_toDisplayString"],"sourceRoot":"","sources":["C:\\yoobee_JS_Framework_Assignment\\src\\views\\ProfileView.vue"],"sourcesContent":["<template>\r\n  \r\n  <div class=\"site-canvas\" id=\"app\">\r\n  <div class=\"input\">\r\n    <input v-model=\"message\" placeholder=\"Type something...\" autofocus>\r\n    <span>{{message}}</span>\r\n  </div>\r\n</div>\r\n\r\n</template>\r\n\r\n<script>\r\n function getValue() {\r\n  // get the value inside of the textbox\r\n  let value = document.getElementById(\"text\").value;\r\n\r\n  // log it!\r\n  console.log(value);\r\n\r\n  // if it's null, send text \"null value\", otherwise, send the actual value\r\n  if (value) {\r\n    document.getElementById(\"output\").innerHTML = value;\r\n  } else {\r\n    document.getElementById(\"output\").innerHTML = \"null value\";\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <input type=\"text\" name=\"text\" id=\"text\" />\r\n      <button type=\"button\" onClick={() => getValue()}>\r\n        Get value\r\n      </button>\r\n      <span id=\"output\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}