{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"Users\",\n  props: {\n    posts: Array\n  },\n\n  data() {\n    return {\n      comments: null,\n      error: false,\n      submitting: false,\n      success: false,\n      comment: {\n        name: \"\",\n        post: \"\",\n        editing: null\n      }\n    };\n  },\n\n  computed: {\n    invalidName() {\n      return this.comment.name === \"\";\n    }\n\n  },\n  methods: {\n    editMode(id) {\n      this.editing = id;\n    },\n\n    editEvent(comment) {\n      if (this.comment.name === \"\" || this.comment.post === \"\") return;\n      this.$emit(\"edit:comment\", comment.id, comment);\n      this.editing = null;\n    },\n\n    handleSubmit() {\n      this.clearStatus();\n      this.submitting = true;\n\n      if (this.invalidName) {\n        this.error = true;\n        return;\n      }\n\n      this.$emit(\"add:comment\", this.comment);\n      this.$refs.first.focus();\n      this.comment = {\n        name: \"\",\n        post: \"\"\n      };\n      this.clearStatus();\n      this.submitting = false;\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n\n    getData() {\n      axios.get(\"http://localhost:3000/comments\").then(response => {\n        this.users = response.data;\n        console.log(response);\n        this.comments = response.data;\n      });\n    },\n\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n        console.log(this.comment.id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment() {\n      try {\n        const response = await fetch('http://localhost:3000/comments', {\n          method: \"POST\",\n          body: JSON.stringify(this.comment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(updatedComment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = this.comments.map(comment => comment.id === id ? data : comment);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  },\n\n  mounted() {\n    this.getData();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["axios","name","props","posts","Array","data","comments","error","submitting","success","comment","post","editing","computed","invalidName","methods","editMode","id","editEvent","$emit","handleSubmit","clearStatus","$refs","first","focus","getData","get","then","response","users","console","log","deleteComment","fetch","method","filter","addComment","body","JSON","stringify","headers","json","editComment","updatedComment","map","mounted"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/components/Users.vue"],"sourcesContent":["<template>\n  <div>\n    <div id=\"comment-form\">\n      <form class=\"commentForm\" @submit.prevent=\"handleSubmit\">\n        <input\n          ref=\"name\"\n          type=\"text\"\n          :class=\"{ 'has-error': submitting && invalidName }\"\n          v-model=\"comment.name\"\n          @focus=\"clearStatus\"\n          @keypress=\"clearStatus\"\n        />\n         <input\n          ref=\"post\"\n          type=\"text\"\n          :class=\"{ 'has-error': submitting && invalidName }\"\n          v-model=\"comment.post\"\n          @focus=\"clearStatus\"\n          @keypress=\"clearStatus\"\n        />\n        <p v-if=\"error && submitting\" class=\"error-message\">\n          ❗Please fill out all fields\n        </p>\n        <p v-if=\"success\" class=\"success-message\">\n          ✅ Comment successfully added\n        </p>\n        <button v-on:click=\"addComment(comment.id)\" class=\"button--primary\">Add Comment</button>\n      </form>\n    </div>\n\n    <table class=\"commentPosts\" border=\"1px\">\n      <tr>\n        <td>name</td>\n        <td>post</td>\n        <td>action</td>\n      </tr>\n      <tr v-for=\"comment in comments\" v-bind:key=\"comment.id\">\n        <td v-if=\"editing === comment.id\">\n            <input type=\"text\" v-model=\"comment.name\" />\n        </td>\n        <td v-else>{{ comment.name }}</td>\n\n        <td v-if=\"editing === comment.id\">\n            <input type=\"text\" v-model=\"comment.post\" />\n        </td>\n        <td v-else>{{ comment.post }}</td>\n\n        <td v-if=\"editing === comment.id\">\n            <button @click=\"editComment(comment)\">Save</button>\n            <button class=\"muted-button\" @click=\"editing = null\">Cancel</button>\n          </td>\n          <td v-else>\n            <button @click=\"editMode(comment.id)\">\n              <img class=\"crudIcon\" src=\"../assets/icons/edit.png\" alt=\"edit\" />\n            </button>\n            <button @click=\"$emit('delete:comment', comment.id)\">\n              <img\n                class=\"crudIcon\"\n                src=\"../assets/icons/delete.png\"\n                alt=\"delete\"\n              />\n            </button>\n          </td>\n\n\n        <!-- <td><button v-on:click=\"deleteComment(comment.id)\"><img class=\"crudIcon\" src=\"../assets/icons/delete.png\" alt=\"delete\" /></button>\n        <button v-on:click=\"editComment(comment.id)\"><img class=\"crudIcon\" src=\"../assets/icons/edit.png\" alt=\"edit\" /></button></td> -->\n      </tr>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"Users\",\n    props: {\n    posts: Array,\n  },\n  data() {\n    return {\n      comments: null,\n      error: false,\n      submitting: false,\n      success: false,\n      comment: {\n        name: \"\",\n        post: \"\",\n        editing: null,\n      }\n    };\n  },\ncomputed: {\n    invalidName() {\n      return this.comment.name === \"\";\n    }\n  },\n  methods: {\n      editMode(id) {\n      this.editing = id;\n    },\n    editEvent(comment) {\n      if (\n        this.comment.name === \"\" ||\n        this.comment.post === \"\"\n      )\n        return;\n      this.$emit(\"edit:comment\", comment.id, comment);\n      this.editing = null;\n    },\n      handleSubmit() {\n      this.clearStatus();\n      this.submitting = true;\n\n    if (this.invalidName) {\n        this.error = true;\n        return;\n      }\n\n      this.$emit(\"add:comment\", this.comment);\n      this.$refs.first.focus();\n      this.comment = {\n        name: \"\",\n        post: \"\"\n\n      };\n      this.clearStatus();\n      this.submitting = false;\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n    getData() {\n      axios.get(\"http://localhost:3000/comments\").then((response) => {\n        this.users = response.data;\n        console.log(response);\n        this.comments = response.data;\n      });\n    },\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\",\n        });\n        this.comments = this.comments.filter((comment) => comment.id !== id);\n        console.log(this.comment.id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment() {\n      try {\n        const response = await fetch(\n          'http://localhost:3000/comments',\n          {\n            method: \"POST\",\n            body: JSON.stringify(this.comment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n     async editComment(id, updatedComment) {\n      try {\n        const response = await\n          fetch(`http://localhost:3000/comments/${id}`,\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedComment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = this.comments.map(comment =>\n          comment.id === id ? data : comment\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n  },\n  mounted() {\n    this.getData();\n  },\n};\n</script>\n\n<style scoped>\n.commentPosts {\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 50px;\n  margin-bottom: 100px;\n}\n\nbutton {\n    margin-right: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}