{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../assets/icons/edit.png';\nimport _imports_1 from '../assets/icons/delete.png';\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-040e3608\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  id: \"comment-form\"\n};\nconst _hoisted_2 = {\n  class: \"commentField\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"Name\", -1\n/* HOISTED */\n));\n\nconst _hoisted_4 = {\n  class: \"commentField\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"Comment\", -1\n/* HOISTED */\n));\n\nconst _hoisted_6 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_7 = {\n  key: 1,\n  class: \"success-message\"\n};\nconst _hoisted_8 = {\n  class: \"commentPosts\",\n  border: \"1px\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"td\", null, \"Name\"), /*#__PURE__*/_createElementVNode(\"td\", null, \"Comments posted\")], -1\n/* HOISTED */\n));\n\nconst _hoisted_10 = {\n  key: 0,\n  class: \"editCommentInput\"\n};\nconst _hoisted_11 = [\"onUpdate:modelValue\"];\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = {\n  key: 2\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = {\n  key: 3\n};\nconst _hoisted_16 = [\"onClick\"];\n\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"crudIcon\",\n  src: _imports_0\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_18 = [_hoisted_17];\nconst _hoisted_19 = [\"onClick\"];\n\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"crudIcon\",\n  src: _imports_1\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_21 = [_hoisted_20];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    class: \"commentForm\",\n    onSubmit: _cache[6] || (_cache[6] = _withModifiers((...args) => $options.handleSubmit && $options.handleSubmit(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    ref: \"name\",\n    type: \"text\",\n    class: _normalizeClass({\n      'has-error': $data.submitting && $options.invalidName\n    }),\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.comment.name = $event),\n    onFocus: _cache[1] || (_cache[1] = (...args) => $options.clearStatus && $options.clearStatus(...args)),\n    onKeypress: _cache[2] || (_cache[2] = (...args) => $options.clearStatus && $options.clearStatus(...args))\n  }, null, 34\n  /* CLASS, HYDRATE_EVENTS */\n  ), [[_vModelText, $data.comment.name]])]), _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n    ref: \"post\",\n    type: \"text\",\n    class: _normalizeClass({\n      'has-error': $data.submitting && $options.invalidComment\n    }),\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.comment.post = $event),\n    onFocus: _cache[4] || (_cache[4] = (...args) => $options.clearStatus && $options.clearStatus(...args)),\n    onKeypress: _cache[5] || (_cache[5] = (...args) => $options.clearStatus && $options.clearStatus(...args))\n  }, null, 34\n  /* CLASS, HYDRATE_EVENTS */\n  ), [[_vModelText, $data.comment.post]])]), $data.error && $data.submitting ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \" ❗Please fill out all fields \")) : _createCommentVNode(\"v-if\", true), $data.success ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \" ✅ Comment successfully added \")) : _createCommentVNode(\"v-if\", true)], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.addComment($data.comment.id)),\n    class: \"button--primary\"\n  }, \" Add Comment \")]), _createElementVNode(\"table\", _hoisted_8, [_hoisted_9, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, comment => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: comment.id\n    }, [_ctx.editing === comment.id ? (_openBlock(), _createElementBlock(\"td\", _hoisted_10, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => comment.name = $event\n    }, null, 8\n    /* PROPS */\n    , _hoisted_11), [[_vModelText, comment.name]])])) : (_openBlock(), _createElementBlock(\"td\", _hoisted_12, _toDisplayString(comment.name), 1\n    /* TEXT */\n    )), _createCommentVNode(\" <td v-if=\\\"editing === comment.id\\\">\\n            <input\\n              type=\\\"text\\\"\\n              v-model=\\\"comment.email\\\"\\n            >\\n          </td> \"), _createCommentVNode(\" <td v-else>{{comment.email}}</td> \"), _ctx.editing === comment.id ? (_openBlock(), _createElementBlock(\"td\", _hoisted_13, [_createElementVNode(\"button\", {\n      onClick: $event => _ctx.editcomment(comment)\n    }, \"Save\", 8\n    /* PROPS */\n    , _hoisted_14), _createElementVNode(\"button\", {\n      class: \"muted-button\",\n      onClick: _cache[8] || (_cache[8] = $event => _ctx.editing = null)\n    }, \"Cancel\")])) : (_openBlock(), _createElementBlock(\"td\", _hoisted_15, [_createElementVNode(\"button\", {\n      onClick: $event => _ctx.editMode(comment.id)\n    }, _hoisted_18, 8\n    /* PROPS */\n    , _hoisted_16), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.$emit('delete:comment', comment.id)\n    }, _hoisted_21, 8\n    /* PROPS */\n    , _hoisted_19)]))]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]);\n}","map":{"version":3,"mappings":"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","names":["_imports_0","_imports_1","id","class","_createElementVNode","border","src","_hoisted_17","_hoisted_20","_createElementBlock","onSubmit","$options","_hoisted_3","ref","type","$data","name","$event","onFocus","onKeypress","_hoisted_5","post","onClick","_hoisted_9","_Fragment","_renderList","comment","key","_ctx","_hoisted_12","_toDisplayString","_createCommentVNode","_hoisted_13","_hoisted_14","_hoisted_15"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/components/Users.vue"],"sourcesContent":["<template>\n  <div>\n    <div id=\"comment-form\">\n      <form class=\"commentForm\" @submit.prevent=\"handleSubmit\">\n        <div class=\"commentField\">\n          <label>Name</label>\n          <input\n            ref=\"name\"\n            type=\"text\"\n            :class=\"{ 'has-error': submitting && invalidName }\"\n            v-model=\"comment.name\"\n            @focus=\"clearStatus\"\n            @keypress=\"clearStatus\"\n          />\n        </div>\n        <div class=\"commentField\">\n          <label>Comment</label>\n          <input\n            ref=\"post\"\n            type=\"text\"\n            :class=\"{ 'has-error': submitting && invalidComment }\"\n            v-model=\"comment.post\"\n            @focus=\"clearStatus\"\n            @keypress=\"clearStatus\"\n          />\n        </div>\n        <p v-if=\"error && submitting\" class=\"error-message\">\n          ❗Please fill out all fields\n        </p>\n        <p v-if=\"success\" class=\"success-message\">\n          ✅ Comment successfully added\n        </p>\n      </form>\n      <button v-on:click=\"addComment(comment.id)\" class=\"button--primary\">\n        Add Comment\n      </button>\n    </div>\n\n    <table class=\"commentPosts\" border=\"1px\">\n      <tr>\n        <td>Name</td>\n        <td>Comments posted</td>\n      </tr>\n      <tr v-for=\"comment in comments\" v-bind:key=\"comment.id\">\n          <td class=\"editCommentInput\" v-if=\"editing === comment.id\">\n            <input\n              type=\"text\"\n              v-model=\"comment.name\"\n            >\n          </td>\n          <td v-else>{{comment.name}}</td>\n          <!-- <td v-if=\"editing === comment.id\">\n            <input\n              type=\"text\"\n              v-model=\"comment.email\"\n            >\n          </td> -->\n          <!-- <td v-else>{{comment.email}}</td> -->\n          <td v-if=\"editing === comment.id\">\n            <button @click=\"editcomment(comment)\">Save</button>\n            <button\n              class=\"muted-button\"\n              @click=\"editing = null\"\n            >Cancel</button>\n          </td>\n          <td v-else>\n            <button @click=\"editMode(comment.id)\"><img class=\"crudIcon\" src=\"../assets/icons/edit.png\"></button>\n            <button @click=\"$emit('delete:comment', comment.id)\"><img class=\"crudIcon\" src=\"../assets/icons/delete.png\"></button>\n          </td>\n      </tr>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"Users\",\n  data() {\n    return {\n      comments: null,\n      error: false,\n      submitting: false,\n      success: false,\n      comment: {\n        name: \"\",\n        post: \"\",\n      },\n    };\n  },\n  computed: {\n    invalidName() {\n      return this.comment.name === \"\";\n    },\n      invalidComment() {\n      return this.comment.post === \"\";\n    },\n  },\n  methods: {\n    handleSubmit() {\n      this.clearStatus();\n      this.submitting = true;\n\n      if (this.invalidName || this.invalidComment) {\n        this.error = true;\n        return;\n      }\n\n      this.$emit(\"add:comment\", this.comment);\n      this.$refs.first.focus();\n      this.comment = {\n        name: \"\",\n        post: \"\",\n      };\n      this.clearStatus();\n      this.submitting = false;\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n    getData() {\n      axios.get(\"http://localhost:3000/comments\").then((response) => {\n        this.users = response.data;\n        console.log(response);\n        this.comments = response.data;\n      });\n    },\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\",\n        });\n        this.comments = this.comments.filter((comment) => comment.id !== id);\n        console.log(this.comment.id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment() {\n      try {\n        const response = await fetch(\"http://localhost:3000/comments\", {\n          method: \"POST\",\n          body: JSON.stringify(this.comment),\n          headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(\n          `http://localhost:3000/comments/${id}`,\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedComment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = this.comments.map(comment =>\n          comment.id === id ? data : comment\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n  mounted() {\n    this.getData();\n  },\n};\n</script>\n\n<style scoped>\n.commentPosts {\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 50px;\n  margin-bottom: 100px;\n}\n.commentField {\n  margin-bottom: 10px;\n  justify-content:center;\n  display: flex;\n}\n\n.commentField label {\n width: 100px;\n}\n\n.commentField input {\n  width: 500px;\n}\n\n\nbutton {\n  margin-right: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}