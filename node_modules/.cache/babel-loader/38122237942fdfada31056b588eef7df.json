{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"create\"\n};\nconst _hoisted_2 = {\n  id: \"example-1\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_event_form = _resolveComponent(\"event-form\");\n\n  const _component_event_table = _resolveComponent(\"event-table\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_event_form, {\n    \"onAdd:event\": $options.addEvent\n  }, null, 8\n  /* PROPS */\n  , [\"onAdd:event\"]), _createVNode(_component_event_table, {\n    class: \"displayCenter\",\n    events: $data.events,\n    \"onDelete:event\": $options.deleteEvent,\n    \"onEdit:event\": $options.editEvent,\n    \"onComment:event\": $options.commentEvent\n  }, null, 8\n  /* PROPS */\n  , [\"events\", \"onDelete:event\", \"onEdit:event\", \"onComment:event\"])]), _createElementVNode(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.items, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.message\n    }, _toDisplayString(item.message), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAGOA,KAAK,EAAC;;;EAUPC,EAAE,EAAC;;;;;;;6DAVPC,oBASM,KATN,cASM,CARJC,aAAoCC,qBAApC,EAAoC;IAAvB,eAAWC;EAAY,CAApC,EAAgC,IAAhC,EAAgC;EAAA;EAAhC,EAAgC,eAAhC,CAQI,EAPJF,aAMEG,sBANF,EAME;IALAN,KAAK,EAAC,eAKN;IAJCO,MAAM,EAAEC,YAIT;IAHC,kBAAcH,oBAGf;IAFC,gBAAYA,kBAEb;IADC,mBAAeA;EAChB,CANF;;EAAA,kEAOI,CATN,GAUAH,oBAIG,IAJH,cAIG,oBAHHO,oBAEKC,SAFL,EAEK,IAFL,EAEKC,YAFcC,UAEd,EAFMC,IAAa,IAAT;yBAAfJ,oBAEK,IAFL,EAEK;MAFsBK,GAAG,EAAED,IAAI,CAACE;IAEhC,CAFL,mBACKF,IAAI,CAACE,QADV,EACiB;IAAA;IADjB;GAEK,CAFL;;EAAA,CAGG,EAJH","names":["class","id","_createElementVNode","_createVNode","_component_event_form","$options","_component_event_table","events","$data","_createElementBlock","_Fragment","_renderList","_ctx","item","key","message"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/views/CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\n<!--Functionality to be tested by Justina Ho-->\n<template>\n  <div class=\"create\">\n    <event-form @add:event=\"addEvent\" />\n    <event-table\n      class=\"displayCenter\"\n      :events=\"events\"\n      @delete:event=\"deleteEvent\"\n      @edit:event=\"editEvent\"\n      @comment:event=\"commentEvent\"\n    />\n  </div>\n  <ul id=\"example-1\">\n  <li v-for=\"item in items\" :key=\"item.message\">\n    {{ item.message }}\n  </li>\n</ul>\n</template>\n\n<style>\n@import \"../assets/styles/main.css\";\n</style>\n\n<script>\nimport EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\";\nconst baseURL = \"http://localhost:3000/events\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n  },\n  data() {\n    return {\n      events: [],\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\n          baseURL\n          /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\n          baseURL,\n          /*Use of the JSON https API created by Justina*/\n          {\n            method: \"POST\",\n            body: JSON.stringify(event),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\n          }\n        );\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(\n           'baseURL/${id}',\n          // `https://jsonplaceholder.typicode.com/users/${id}`,\n          /*Use of the JSON https API created by Justina*/\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedEvent),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\n          }\n        );\n        const data = await response.json();\n        this.events = this.events.map((event) =>\n          event.id === id ? data : event\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`baseURL/${id}`, {\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\",\n        });\n        this.events = this.events.filter((event) => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async commentEvent(id) {\n      try {\n        await fetch(`baseURL/${id}`, {\n          /*Use of the JSON https API created by Justina*/\n          // method: \"POST\",\n        });\n\n        \n        // this.events = this.events.filter((event) => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}