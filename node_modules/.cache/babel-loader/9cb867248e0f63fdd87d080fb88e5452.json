{"ast":null,"code":"import EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\"; // import CommentTable from \"@/components/CommentTable.vue\";\n// import CommentForm from \"@/components/CommentForm.vue\";\n\nimport Users from \"@/components/Users.vue\"; // const baseURL = \"http://localhost:3000/events\";\n// const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    // CommentForm,\n    // CommentTable,\n    Users\n  },\n\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\"http://localhost:3000/events\"\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch('http://localhost:3000/events',\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"POST\",\n          body: JSON.stringify(event),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(`http://localhost:3000/events/${id}`,\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"PUT\",\n          body: JSON.stringify(updatedEvent),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = this.events.map(event => event.id === id ? data : event);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`http://localhost:3000/events/${id}`, {\n          /*This is where our own API data will go*/\n\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\"\n        });\n        this.events = this.events.filter(event => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    //  Comment form\n    async getComments() {\n      try {\n        const response = await fetch('http://localhost:3000/comments');\n        const data = await response.json();\n        this.comments = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    //  Add Comment form\n    async addComment(comment) {\n      try {\n        const response = await fetch('http://localhost:3000/comments', {\n          method: \"POST\",\n          body: JSON.stringify(comment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    //  Add Comment form\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(updatedComment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = this.comments.map(comment => comment.id === id ? data : comment);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["EventForm","EventTable","Users","name","components","data","events","comments","mounted","getEvents","getComments","methods","response","fetch","json","error","console","addEvent","event","method","body","JSON","stringify","headers","editEvent","id","updatedEvent","map","deleteEvent","filter","addComment","comment","editComment","updatedComment","deleteComment"],"sourceRoot":"","sources":["C:\\yoobee_JS_Framework_Assignment\\src\\views\\CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\r\n<!--Functionality to be tested by Justina Ho-->\r\n<template>\r\n  <h1 class=\"title center\">Create Event</h1>\r\n   <div class=\"overlayLandingImg\">\r\n    <img\r\n      class=\"landingImg\"\r\n      src=\"../assets/images/createEvent.jpg\"\r\n      alt=\"Landing page\"\r\n    />\r\n  </div>\r\n\r\n  <!--Event form and table display-->\r\n  <div class=\"create\">\r\n    <event-form @add:event=\"addEvent\"/>\r\n    <event-table\r\n      class=\"displayCenter\"\r\n      :events=\"events\"\r\n      @delete:event=\"deleteEvent\"\r\n      @edit:event=\"editEvent\"\r\n      @comment:event=\"commentEvent\"\r\n    />\r\n  </div>\r\n\r\n  <!--Comments section-->\r\n    <div id=\"app\" class=\"small-container\">\r\n    <h2 class=\"title--secondary\">Comments</h2>\r\n    <comment-form @add:comment=\"addComment\"/>\r\n            <Users/>\r\n    <comment-table\r\n      :comments=\"comments\"\r\n      @delete:comment=\"deleteComment\"\r\n      @edit:comment=\"editComment\"\r\n    />\r\n  </div>\r\n\r\n</template>\r\n\r\n<style>\r\n/*All style files are entered into the 'style.scss' file and converted into css into the 'style.css' file*/\r\n@import \"../assets/styles/style.css\";\r\n</style>\r\n\r\n<script>\r\nimport EventForm from \"@/components/EventForm.vue\";\r\nimport EventTable from \"@/components/EventTable.vue\";\r\n// import CommentTable from \"@/components/CommentTable.vue\";\r\n// import CommentForm from \"@/components/CommentForm.vue\";\r\nimport Users from \"@/components/Users.vue\";\r\n// const baseURL = \"http://localhost:3000/events\";\r\n// const commentURL = \"http://localhost:3000/comments\";\r\n\r\nexport default {\r\n  name: \"app\",\r\n  components: {\r\n    EventForm,\r\n    EventTable,\r\n    // CommentForm,\r\n    // CommentTable,\r\n    Users\r\n  },\r\n  data() {\r\n    return {\r\n      events: [],\r\n      comments: []\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.getEvents();\r\n    this.getComments();\r\n  },\r\n\r\n methods: {\r\n\r\n    async getEvents() {\r\n      try {\r\n        const response = await fetch(\r\n         \"http://localhost:3000/events\"\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n        );\r\n        const data = await response.json();\r\n        this.events = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addEvent(event) {\r\n      try {\r\n        const response = await fetch(\r\n         'http://localhost:3000/events',\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(event),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = [...this.events, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editEvent(id, updatedEvent) {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3000/events/${id}`,\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedEvent),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = this.events.map(event =>\r\n          event.id === id ? data : event\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteEvent(id) {\r\n      try {\r\n        await fetch(`http://localhost:3000/events/${id}`, {\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          method: \"DELETE\"\r\n        });\r\n        this.events = this.events.filter(event => event.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n//  Comment form\r\n     async getComments() {\r\n      try {\r\n        const response = await fetch(\r\n          'http://localhost:3000/comments',\r\n        );\r\n        const data = await response.json();\r\n        this.comments = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n//  Add Comment form\r\n    async addComment(comment) {\r\n      try {\r\n        const response = await fetch(\r\n          'http://localhost:3000/comments',\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(comment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = [...this.comments, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n  //  Add Comment form\r\n    async editComment(id, updatedComment) {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3000/comments/${id}`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedComment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = this.comments.map(comment =>\r\n          comment.id === id ? data : comment\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteComment(id) {\r\n      try {\r\n        await fetch(`http://localhost:3000/comments/${id}`, {\r\n          method: \"DELETE\"\r\n        });\r\n        this.comments = this.comments.filter(comment => comment.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n  }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}