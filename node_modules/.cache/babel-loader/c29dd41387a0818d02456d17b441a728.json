{"ast":null,"code":"import EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\";\nimport CommentTable from \"@/components/CommentTable.vue\";\nimport CommentForm from \"@/components/CommentForm.vue\"; // const baseURL = \"http://localhost:3000/events\";\n// const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    CommentForm,\n    CommentTable\n  },\n\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n  methods: {\n    getData() {\n      this.axios.get('http://:localhost:3000/events').then(result => {\n        console.log.warn(result);\n        this.events = result.data;\n      });\n    },\n\n    async getEvents() {\n      try {\n        const response = await fetch(\"https://api.npoint.io/a284c810658102f76a1f/events\"\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch('https://api.npoint.io/a284c810658102f76a1f/events',\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"POST\",\n          body: JSON.stringify(event),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(`https://api.npoint.io/a284c810658102f76a1f/events/${id}`,\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"PUT\",\n          body: JSON.stringify(updatedEvent),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = this.events.map(event => event.id === id ? data : event);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://api.npoint.io/a284c810658102f76a1f/events/${id}`, {\n          /*This is where our own API data will go*/\n\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\"\n        });\n        this.events = this.events.filter(event => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    //  Comment form\n    async getComments() {\n      try {\n        const response = await fetch('https://api.npoint.io/a284c810658102f76a1f/comments');\n        const data = await response.json();\n        this.comments = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment(comment) {\n      try {\n        const response = await fetch('https://api.npoint.io/a284c810658102f76a1f/comments', {\n          method: \"POST\",\n          body: JSON.stringify(comment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(`https://api.npoint.io/a284c810658102f76a1f/comments/${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(updatedComment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = this.comments.map(comment => comment.id === id ? data : comment);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteComment(id) {\n      try {\n        await fetch(`https://api.npoint.io/a284c810658102f76a1f/comments/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["EventForm","EventTable","CommentTable","CommentForm","name","components","data","events","comments","mounted","getEvents","getComments","methods","getData","axios","get","then","result","console","log","warn","response","fetch","json","error","addEvent","event","method","body","JSON","stringify","headers","editEvent","id","updatedEvent","map","deleteEvent","filter","addComment","comment","editComment","updatedComment","deleteComment"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/views/CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\n<!--Functionality to be tested by Justina Ho-->\n<template>\n  <div class=\"create\">\n    <event-form @add:event=\"addEvent\"/>\n    <event-table\n      class=\"displayCenter\"\n      :events=\"events\"\n      @delete:event=\"deleteEvent\"\n      @edit:event=\"editEvent\"\n      @comment:event=\"commentEvent\"\n    />\n  </div>\n\n    <div id=\"app\" class=\"small-container\">\n    <h2 class=\"title--secondary\">Comments</h2>\n\n    <comment-form @add:comment=\"addComment\"/>\n    <comment-table\n      :comments=\"comments\"\n      @delete:comment=\"deleteComment\"\n      @edit:comment=\"editComment\"\n    />\n  </div>\n\n</template>\n\n<style>\n@import \"../assets/styles/main.css\";\n</style>\n\n<script>\nimport EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\";\nimport CommentTable from \"@/components/CommentTable.vue\";\nimport CommentForm from \"@/components/CommentForm.vue\";\n// const baseURL = \"http://localhost:3000/events\";\n// const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    CommentForm,\n    CommentTable\n  },\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n methods: {\n   getData() {\n     this.axios.get('http://:localhost:3000/events').then((result)=>{\n       console.log.warn(result)\n       this.events = result.data\n       })\n   },\n    async getEvents() {\n      try {\n        const response = await fetch(\n         \"https://api.npoint.io/a284c810658102f76a1f/events\"\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\n         'https://api.npoint.io/a284c810658102f76a1f/events',\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n          {\n            method: \"POST\",\n            body: JSON.stringify(event),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(\n          `https://api.npoint.io/a284c810658102f76a1f/events/${id}`,\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedEvent),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = this.events.map(event =>\n          event.id === id ? data : event\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://api.npoint.io/a284c810658102f76a1f/events/${id}`, {\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\"\n        });\n        this.events = this.events.filter(event => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    \n//  Comment form\n     async getComments() {\n      try {\n        const response = await fetch(\n          'https://api.npoint.io/a284c810658102f76a1f/comments',\n        );\n        const data = await response.json();\n        this.comments = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment(comment) {\n      try {\n        const response = await fetch(\n          'https://api.npoint.io/a284c810658102f76a1f/comments',\n          {\n            method: \"POST\",\n            body: JSON.stringify(comment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(\n          `https://api.npoint.io/a284c810658102f76a1f/comments/${id}`,\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedComment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = this.comments.map(comment =>\n          comment.id === id ? data : comment\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteComment(id) {\n      try {\n        await fetch(`https://api.npoint.io/a284c810658102f76a1f/comments/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}; \n</script>"]},"metadata":{},"sourceType":"module"}