{"ast":null,"code":"import axios from \"axios\";\nimport CommentTable from \"@/components/CommentTable.vue\";\nexport default {\n  name: \"Users\",\n\n  data() {\n    return {\n      CommentTable,\n      counter: 65789,\n      comments: null,\n      error: false,\n      submitting: false,\n      success: false,\n      comment: {\n        name: \"\",\n        post: \"\"\n      }\n    };\n  },\n\n  computed: {\n    invalidName() {\n      return this.comment.name === \"\";\n    },\n\n    invalidComment() {\n      return this.comment.post === \"\";\n    }\n\n  },\n  methods: {\n    handleSubmit() {\n      this.clearStatus();\n      this.submitting = true;\n\n      if (this.invalidName || this.invalidComment) {\n        this.error = true;\n        return;\n      }\n\n      this.$emit(\"add:comment\", this.comment);\n      this.$refs.first.focus();\n      this.comment = {\n        name: \"\",\n        post: \"\"\n      };\n      this.clearStatus();\n      this.submitting = false;\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n\n    getData() {\n      axios.get(\"http://localhost:3000/comments\").then(response => {\n        this.users = response.data;\n        this.comments = response.data;\n      });\n    },\n\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n        console.log(this.comment.id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment() {\n      try {\n        const response = await fetch(\"http://localhost:3000/comments\", {\n          method: \"POST\",\n          body: JSON.stringify(this.comment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(updatedComment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = this.comments.map(comment => comment.id === id ? data : comment);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  },\n\n  mounted() {\n    this.getData();\n  }\n\n};","map":{"version":3,"mappings":"AAkFA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,eAAe;EACbC,IAAI,EAAE,OADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLF,YADK;MAELG,OAAO,EAAE,KAFJ;MAGLC,QAAQ,EAAE,IAHL;MAILC,KAAK,EAAE,KAJF;MAKLC,UAAU,EAAE,KALP;MAMLC,OAAO,EAAE,KANJ;MAOLC,OAAO,EAAE;QACPP,IAAI,EAAE,EADC;QAEPQ,IAAI,EAAE;MAFC;IAPJ,CAAP;EAYD,CAfY;;EAgBbC,QAAQ,EAAE;IACRC,WAAW,GAAG;MACZ,OAAO,KAAKH,OAAL,CAAaP,IAAb,KAAsB,EAA7B;IACD,CAHO;;IAINW,cAAc,GAAG;MACjB,OAAO,KAAKJ,OAAL,CAAaC,IAAb,KAAsB,EAA7B;IACD;;EANO,CAhBG;EAwBbI,OAAO,EAAE;IACPC,YAAY,GAAG;MACb,KAAKC,WAAL;MACA,KAAKT,UAAL,GAAkB,IAAlB;;MAEA,IAAI,KAAKK,WAAL,IAAoB,KAAKC,cAA7B,EAA6C;QAC3C,KAAKP,KAAL,GAAa,IAAb;QACA;MACF;;MAEA,KAAKW,KAAL,CAAW,aAAX,EAA0B,KAAKR,OAA/B;MACA,KAAKS,KAAL,CAAWC,KAAX,CAAiBC,KAAjB;MACA,KAAKX,OAAL,GAAe;QACbP,IAAI,EAAE,EADO;QAEbQ,IAAI,EAAE;MAFO,CAAf;MAIA,KAAKM,WAAL;MACA,KAAKT,UAAL,GAAkB,KAAlB;IACD,CAlBM;;IAoBPS,WAAW,GAAG;MACZ,KAAKR,OAAL,GAAe,KAAf;MACA,KAAKF,KAAL,GAAa,KAAb;IACD,CAvBM;;IAwBPe,OAAO,GAAG;MACRrB,KAAK,CAACsB,GAAN,CAAU,gCAAV,EAA4CC,IAA5C,CAAkDC,QAAD,IAAc;QAC7D,KAAKC,KAAL,GAAaD,QAAQ,CAACrB,IAAtB;QACA,KAAKE,QAAL,GAAgBmB,QAAQ,CAACrB,IAAzB;MACD,CAHD;IAID,CA7BM;;IA8BP,MAAMuB,aAAN,CAAoBC,EAApB,EAAwB;MACtB,IAAI;QACF,MAAMC,KAAK,CAAE,kCAAiCD,EAAG,EAAtC,EAAyC;UAClDE,MAAM,EAAE;QAD0C,CAAzC,CAAX;QAGA,KAAKxB,QAAL,GAAgB,KAAKA,QAAL,CAAcyB,MAAd,CAAsBrB,OAAD,IAAaA,OAAO,CAACkB,EAAR,KAAeA,EAAjD,CAAhB;QACAI,OAAO,CAACC,GAAR,CAAY,KAAKvB,OAAL,CAAakB,EAAzB;MACF,CANA,CAME,OAAOrB,KAAP,EAAc;QACdyB,OAAO,CAACzB,KAAR,CAAcA,KAAd;MACF;IACD,CAxCM;;IA0CP,MAAM2B,UAAN,GAAmB;MACjB,IAAI;QACF,MAAMT,QAAO,GAAI,MAAMI,KAAK,CAAC,gCAAD,EAAmC;UAC7DC,MAAM,EAAE,MADqD;UAE7DK,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAK3B,OAApB,CAFuD;UAG7D4B,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHoD,CAAnC,CAA5B;QAKA,MAAMlC,IAAG,GAAI,MAAMqB,QAAQ,CAACc,IAAT,EAAnB;QACA,KAAKjC,QAAL,GAAgB,CAAC,GAAG,KAAKA,QAAT,EAAmBF,IAAnB,CAAhB;MACF,CARA,CAQE,OAAOG,KAAP,EAAc;QACdyB,OAAO,CAACzB,KAAR,CAAcA,KAAd;MACF;IACD,CAtDM;;IAwDP,MAAMiC,WAAN,CAAkBZ,EAAlB,EAAsBa,cAAtB,EAAsC;MACpC,IAAI;QACF,MAAMhB,QAAO,GAAI,MAAMI,KAAK,CACzB,kCAAiCD,EAAG,EADX,EAE1B;UACEE,MAAM,EAAE,KADV;UAEEK,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeI,cAAf,CAFR;UAGEH,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAF0B,CAA5B;QAQA,MAAMlC,IAAG,GAAI,MAAMqB,QAAQ,CAACc,IAAT,EAAnB;QACA,KAAKjC,QAAL,GAAgB,KAAKA,QAAL,CAAcoC,GAAd,CAAkBhC,OAAM,IACtCA,OAAO,CAACkB,EAAR,KAAeA,EAAf,GAAoBxB,IAApB,GAA2BM,OADb,CAAhB;MAGF,CAbA,CAaE,OAAOH,KAAP,EAAc;QACdyB,OAAO,CAACzB,KAAR,CAAcA,KAAd;MACF;IACD;;EAzEM,CAxBI;;EAmGboC,OAAO,GAAG;IACR,KAAKrB,OAAL;EACD;;AArGY,CAAf","names":["axios","CommentTable","name","data","counter","comments","error","submitting","success","comment","post","computed","invalidName","invalidComment","methods","handleSubmit","clearStatus","$emit","$refs","first","focus","getData","get","then","response","users","deleteComment","id","fetch","method","filter","console","log","addComment","body","JSON","stringify","headers","json","editComment","updatedComment","map","mounted"],"sourceRoot":"","sources":["C:\\yoobee_JS_Framework_Assignment\\src\\components\\Users.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"comment-form\">\r\n      <form class=\"commentForm\" @submit.prevent=\"handleSubmit\">\r\n        <div class=\"commentField\">\r\n          <label>Name</label>\r\n          <input\r\n            ref=\"name\"\r\n            type=\"text\"\r\n            :class=\"{ 'has-error': submitting && invalidName }\"\r\n            v-model=\"comment.name\"\r\n            @focus=\"clearStatus\"\r\n            @keypress=\"clearStatus\"\r\n          />\r\n        </div>\r\n        <div class=\"commentField\">\r\n          <label>Comment</label>\r\n          <input\r\n            ref=\"post\"\r\n            type=\"text\"\r\n            :class=\"{ 'has-error': submitting && invalidComment }\"\r\n            v-model=\"comment.post\"\r\n            @focus=\"clearStatus\"\r\n            @keypress=\"clearStatus\"\r\n          />\r\n        </div>\r\n        <p v-if=\"error && submitting\" class=\"error-message\">\r\n          ❗Please fill out all fields\r\n        </p>\r\n        <p v-if=\"success\" class=\"success-message\">\r\n          ✅ Comment successfully added\r\n        </p>\r\n      </form>\r\n      <button v-on:click=\"addComment(comment.id)\" class=\"button--primary\">\r\n        Add Comment\r\n      </button>\r\n    </div>\r\n\r\n    <table class=\"commentPosts\" border=\"1px\">\r\n        <p v-if=\"comment.length < 1\" >No events</p>\r\n      <tr>\r\n        <td>Name</td>\r\n        <td>Comments posted</td>\r\n        <td></td>\r\n      </tr>\r\n      <tr v-for=\"comment in comments\" v-bind:key=\"comment.id\">\r\n        <td>{{ comment.name }}</td>\r\n        <td>{{ comment.post }}</td>\r\n        <td>\r\n          <button v-on:click=\"deleteComment(comment.id)\">\r\n            <img\r\n              class=\"crudIcon\"\r\n              src=\"../assets/icons/delete.png\"\r\n              alt=\"delete\"\r\n            />\r\n          </button>\r\n          <button v-on:click=\"editComment(comment.id)\">\r\n            <img\r\n              class=\"crudIcon\"\r\n              src=\"../assets/icons/edit.png\"\r\n              alt=\"edit\"\r\n            />\r\n          </button>\r\n\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n  <!--Add a counter-->\r\n    <div id=\"counter\">\r\n      <p class=\"bold\">Like Hap?</p>\r\n      <button\r\n        id=\"like\"\r\n        @click=\"incrementValue\"\r\n        class=\"button-reset bg-green ba b--black ph4 pv3 mb2 white f4 dim\">\r\n          <img class=\"crudIcon\" src=\"../assets/icons/like.png\" alt=\"edit\" />\r\n        </button>\r\n      <div class=\"likeCountStyling\">{{ counter }}</div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport CommentTable from \"@/components/CommentTable.vue\";\r\n\r\nexport default {\r\n  name: \"Users\",\r\n  data() {\r\n    return {\r\n      CommentTable,\r\n      counter: 65789,\r\n      comments: null,\r\n      error: false,\r\n      submitting: false,\r\n      success: false,\r\n      comment: {\r\n        name: \"\",\r\n        post: \"\",\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    invalidName() {\r\n      return this.comment.name === \"\";\r\n    },\r\n      invalidComment() {\r\n      return this.comment.post === \"\";\r\n    },\r\n  },\r\n  methods: {\r\n    handleSubmit() {\r\n      this.clearStatus();\r\n      this.submitting = true;\r\n\r\n      if (this.invalidName || this.invalidComment) {\r\n        this.error = true;\r\n        return;\r\n      }\r\n\r\n      this.$emit(\"add:comment\", this.comment);\r\n      this.$refs.first.focus();\r\n      this.comment = {\r\n        name: \"\",\r\n        post: \"\",\r\n      };\r\n      this.clearStatus();\r\n      this.submitting = false;\r\n    },\r\n\r\n    clearStatus() {\r\n      this.success = false;\r\n      this.error = false;\r\n    },\r\n    getData() {\r\n      axios.get(\"http://localhost:3000/comments\").then((response) => {\r\n        this.users = response.data;\r\n        this.comments = response.data;\r\n      });\r\n    },\r\n    async deleteComment(id) {\r\n      try {\r\n        await fetch(`http://localhost:3000/comments/${id}`, {\r\n          method: \"DELETE\",\r\n        });\r\n        this.comments = this.comments.filter((comment) => comment.id !== id);\r\n        console.log(this.comment.id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addComment() {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/comments\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify(this.comment),\r\n          headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n        });\r\n        const data = await response.json();\r\n        this.comments = [...this.comments, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editComment(id, updatedComment) {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3000/comments/${id}`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedComment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = this.comments.map(comment =>\r\n          comment.id === id ? data : comment\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getData();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n#counter {\r\n    margin-bottom: 70px;\r\n}\r\n\r\n.commentPosts {\r\n  width: 50%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 50px;\r\n  margin-bottom: 100px;\r\n  border: none;\r\n  border: 1px solid var(--green);\r\n   border-collapse: separate;\r\n   border-spacing: 0;\r\n}\r\n\r\n.commentPosts td {\r\n   border: 1px solid var(--green);\r\n   border-collapse: separate;\r\n   border-spacing: 0;\r\n}\r\n\r\n.commentField {\r\n  margin-bottom: 10px;\r\n  justify-content:center;\r\n  display: flex;\r\n}\r\n\r\n.commentField label {\r\n width: 100px;\r\n}\r\n\r\n.commentField input {\r\n  width: 500px;\r\n}\r\n\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}