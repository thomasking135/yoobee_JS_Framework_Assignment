{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"create\"\n};\nconst _hoisted_2 = {\n  id: \"app\",\n  class: \"small-container\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"title--secondary\"\n}, \"Comments\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_event_form = _resolveComponent(\"event-form\");\n\n  const _component_event_table = _resolveComponent(\"event-table\");\n\n  const _component_comment_form = _resolveComponent(\"comment-form\");\n\n  const _component_comment_table = _resolveComponent(\"comment-table\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_event_form, {\n    \"onAdd:event\": $options.addEvent\n  }, null, 8\n  /* PROPS */\n  , [\"onAdd:event\"]), _createVNode(_component_event_table, {\n    class: \"displayCenter\",\n    events: $data.events,\n    \"onDelete:event\": $options.deleteEvent,\n    \"onEdit:event\": $options.editEvent,\n    \"onComment:event\": _ctx.commentEvent\n  }, null, 8\n  /* PROPS */\n  , [\"events\", \"onDelete:event\", \"onEdit:event\", \"onComment:event\"])]), _createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createVNode(_component_comment_form, {\n    \"onAdd:comment\": $options.addComment\n  }, null, 8\n  /* PROPS */\n  , [\"onAdd:comment\"]), _createVNode(_component_comment_table, {\n    comments: $data.comments,\n    \"onDelete:comment\": $options.deleteComment,\n    \"onEdit:comment\": $options.editComment\n  }, null, 8\n  /* PROPS */\n  , [\"comments\", \"onDelete:comment\", \"onEdit:comment\"])])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAGOA,KAAK,EAAC;;;EAWJC,EAAE,EAAC;EAAMD,KAAK,EAAC;;;gCACpBE,oBAA0C,IAA1C,EAA0C;EAAtCF,KAAK,EAAC;AAAgC,CAA1C,EAA6B,UAA7B,EAAqC;AAAA;AAArC;;;;;;;;;;;6DAZFE,oBASM,KATN,cASM,CARJC,aAAmCC,qBAAnC,EAAmC;IAAtB,eAAWC;EAAW,CAAnC,EAAgC,IAAhC,EAAgC;EAAA;EAAhC,EAAgC,eAAhC,CAQI,EAPJF,aAMEG,sBANF,EAME;IALAN,KAAK,EAAC,eAKN;IAJCO,MAAM,EAAEC,YAIT;IAHC,kBAAcH,oBAGf;IAFC,gBAAYA,kBAEb;IADC,mBAAeI;EAChB,CANF;;EAAA,kEAOI,CATN,GAWEP,oBASI,KATJ,cASI,CARJQ,UAQI,EANJP,aAAyCQ,uBAAzC,EAAyC;IAA1B,iBAAaN;EAAa,CAAzC,EAAsC,IAAtC,EAAsC;EAAA;EAAtC,EAAsC,iBAAtC,CAMI,EALJF,aAIES,wBAJF,EAIE;IAHCC,QAAQ,EAAEL,cAGX;IAFC,oBAAgBH,sBAEjB;IADC,kBAAcA;EACf,CAJF;;EAAA,qDAKI,CATJ","names":["class","id","_createElementVNode","_createVNode","_component_event_form","$options","_component_event_table","events","$data","_ctx","_hoisted_3","_component_comment_form","_component_comment_table","comments"],"sourceRoot":"","sources":["C:\\yoobee_JS_Framework_Assignment\\src\\views\\CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\r\n<!--Functionality to be tested by Justina Ho-->\r\n<template>\r\n  <div class=\"create\">\r\n    <event-form @add:event=\"addEvent\"/>\r\n    <event-table\r\n      class=\"displayCenter\"\r\n      :events=\"events\"\r\n      @delete:event=\"deleteEvent\"\r\n      @edit:event=\"editEvent\"\r\n      @comment:event=\"commentEvent\"\r\n    />\r\n  </div>\r\n\r\n    <div id=\"app\" class=\"small-container\">\r\n    <h2 class=\"title--secondary\">Comments</h2>\r\n\r\n    <comment-form @add:comment=\"addComment\"/>\r\n    <comment-table\r\n      :comments=\"comments\"\r\n      @delete:comment=\"deleteComment\"\r\n      @edit:comment=\"editComment\"\r\n    />\r\n  </div>\r\n\r\n</template>\r\n\r\n<style>\r\n@import \"../assets/styles/main.css\";\r\n</style>\r\n\r\n<script>\r\nimport EventForm from \"@/components/EventForm.vue\";\r\nimport EventTable from \"@/components/EventTable.vue\";\r\nimport CommentTable from \"@/components/CommentTable.vue\";\r\nimport CommentForm from \"@/components/CommentForm.vue\";\r\nconst baseURL = \"http://localhost:3000/events\";\r\nconst commentURL = \"http://localhost:3000/comments\";\r\n\r\nexport default {\r\n  name: \"app\",\r\n  components: {\r\n    EventForm,\r\n    EventTable,\r\n    CommentForm,\r\n    CommentTable\r\n  },\r\n  data() {\r\n    return {\r\n      events: [],\r\n      comments: []\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.getEvents();\r\n    this.getComments();\r\n  },\r\n\r\n methods: {\r\n    async getEvents() {\r\n      try {\r\n        const response = await fetch(\r\n          baseURL\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n        );\r\n        const data = await response.json();\r\n        this.events = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addEvent(event) {\r\n      try {\r\n        const response = await fetch(\r\n          baseURL,\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(event),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = [...this.events, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editEvent(id, updatedEvent) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://jsonplaceholder.typicode.com/users/${id}`,\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedEvent),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = this.events.map(event =>\r\n          event.id === id ? data : event\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteEvent(id) {\r\n      try {\r\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          method: \"DELETE\"\r\n        });\r\n        this.events = this.events.filter(event => event.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    \r\n//  Comment form\r\n     async getComments() {\r\n      try {\r\n        const response = await fetch(\r\n          commentURL,\r\n        );\r\n        const data = await response.json();\r\n        this.comments = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addComment(comment) {\r\n      try {\r\n        const response = await fetch(\r\n          commentURL,\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(comment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = [...this.comments, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editComment(id, updatedComment) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://jsonplaceholder.typicode.com/users/${id}`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedComment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = this.comments.map(comment =>\r\n          comment.id === id ? data : comment\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteComment(id) {\r\n      try {\r\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\r\n          method: \"DELETE\"\r\n        });\r\n        this.comments = this.comments.filter(comment => comment.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n}; \r\n</script>"]},"metadata":{},"sourceType":"module"}