{"ast":null,"code":"import EventForm from \"@/components/EventForm.vue\";\nexport default {\n  name: \"app\",\n  components: {\n    EventForm\n  },\n\n  data() {\n    return {\n      events: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\"\n        /*This is where our own API data will go*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\",\n        /*This is where our own API data will go*/\n        {\n          method: \"POST\",\n          body: JSON.stringify(event),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`,\n        /*This is where our own API data will go*/\n        {\n          method: \"PUT\",\n          body: JSON.stringify(updatedEvent),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = this.events.map(event => event.id === id ? data : event);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          /*This is where our own API data will go*/\n          method: \"DELETE\"\n        });\n        this.employees = this.employees.filter(employee => employee.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAcE,OAAOA,SAAP,MAAsB,4BAAtB;AAEF,eAAe;EACbC,IAAI,EAAE,KADO;EAEbC,UAAU,EAAE;IACVF;EADU,CAFC;;EAKbG,IAAI,GAAG;IACL,OAAO;MACLC,MAAM,EAAE;IADH,CAAP;EAGD,CATY;;EAWbC,OAAO,GAAG;IACR,KAAKC,SAAL;EACD,CAbY;;EAebC,OAAO,EAAE;IACP,MAAMD,SAAN,GAAkB;MAChB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAC1B;QACA;QAF0B,CAA5B;QAIA,MAAMN,IAAG,GAAI,MAAMK,QAAQ,CAACE,IAAT,EAAnB;QACA,KAAKN,MAAL,GAAcD,IAAd;MACF,CAPA,CAOE,OAAOQ,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CAZM;;IAcP,MAAME,QAAN,CAAeC,KAAf,EAAsB;MACpB,IAAI;QACF,MAAMN,QAAO,GAAI,MAAMC,KAAK,CAC1B,4CAD0B;QAE1B;QACA;UACEM,MAAM,EAAE,MADV;UAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAFR;UAGEK,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAH0B,CAA5B;QASA,MAAMhB,IAAG,GAAI,MAAMK,QAAQ,CAACE,IAAT,EAAnB;QACA,KAAKN,MAAL,GAAc,CAAC,GAAG,KAAKA,MAAT,EAAiBD,IAAjB,CAAd;MACF,CAZA,CAYE,OAAOQ,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CA9BM;;IAgCP,MAAMS,SAAN,CAAgBC,EAAhB,EAAoBC,YAApB,EAAkC;MAChC,IAAI;QACF,MAAMd,QAAO,GAAI,MAAMC,KAAK,CACzB,8CAA6CY,EAAG,EADvB;QAE1B;QACA;UACEN,MAAM,EAAE,KADV;UAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeI,YAAf,CAFR;UAGEH,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAH0B,CAA5B;QASA,MAAMhB,IAAG,GAAI,MAAMK,QAAQ,CAACE,IAAT,EAAnB;QACA,KAAKN,MAAL,GAAc,KAAKA,MAAL,CAAYmB,GAAZ,CAAgBT,KAAI,IAChCA,KAAK,CAACO,EAAN,KAAaA,EAAb,GAAkBlB,IAAlB,GAAyBW,KADb,CAAd;MAGF,CAdA,CAcE,OAAOH,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CAlDM;;IAoDP,MAAMa,WAAN,CAAkBH,EAAlB,EAAsB;MACpB,IAAI;QACF,MAAMZ,KAAK,CAAE,8CAA6CY,EAAG,EAAlD,EAAqD;UAC9D;UACAN,MAAM,EAAE;QAFsD,CAArD,CAAX;QAIA,KAAKU,SAAL,GAAiB,KAAKA,SAAL,CAAeC,MAAf,CAAsBC,QAAO,IAAKA,QAAQ,CAACN,EAAT,KAAgBA,EAAlD,CAAjB;MACF,CANA,CAME,OAAOV,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACF;;EA9DO;AAfI,CAAf","names":["EventForm","name","components","data","events","mounted","getEvents","methods","response","fetch","json","error","console","addEvent","event","method","body","JSON","stringify","headers","editEvent","id","updatedEvent","map","deleteEvent","employees","filter","employee"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/views/CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\n<template>\n\n    <div class=\"create\">\n      \n    <event-form @add:event=\"addEvent\"/>\n\n    </div>\n\n   \n  \n  </template>\n  \n  <script>\n  import EventForm from \"@/components/EventForm.vue\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm\n  },\n  data() {\n    return {\n      events: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\"\n          /*This is where our own API data will go*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\",\n          /*This is where our own API data will go*/\n          {\n            method: \"POST\",\n            body: JSON.stringify(event),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          /*This is where our own API data will go*/\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedEvent),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = this.events.map(event =>\n          event.id === id ? data : event\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          /*This is where our own API data will go*/\n          method: \"DELETE\"\n        });\n        this.employees = this.employees.filter(employee => employee.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}; \n  </script>\n  \n  <style>\n  @import '../assets/styles/main.css';\n  .formBorder{\n  border: 2px solid blue; \n  margin-top: 10%;\n  display: inline-block;\n  padding-left: 15%;\n  padding-right: 15%;\n  padding-top: 1%;\n  padding-bottom: 1%; \n}\n\n\n\n#address{\n  width: 353px;\n}\n\n#category, #privacy {\n  width: 360px;\n}\n\n#description{\n  border: 2px solid blue; \n  display: inline-block;\n  padding-left: 14%;\n  padding-right: 14.6%;\n  padding-top: 1%;\n  padding-bottom: 1%; \n}\n\n.postit {\n  width: 100px;\n  height: 30px;\n  float: right;\n  margin-left: 10px;\n}\n\n.postit:hover {\n  transform: scale(1.1);\n  background-color: #06bdb6;\n}\n\n.cancelit {\n  width: 100px;\n  height: 30px;\n  float: right;\n  color: red;\n  border: 2px solid red;\n}\n\n.cancelit:hover {\n  transform: scale(1.1);\n  background-color: red;\n  color: white\n}\n  </style>"]},"metadata":{},"sourceType":"module"}