{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"Users\",\n\n  data() {\n    return {\n      comments: null,\n      error: false,\n      submitting: false,\n      success: false,\n      comment: {\n        name: \"\",\n        post: \"\"\n      }\n    };\n  },\n\n  computed: {\n    invalidName() {\n      return this.comment.name === \"\";\n    }\n\n  },\n  methods: {\n    handleSubmit() {\n      this.clearStatus();\n      this.submitting = true;\n\n      if (this.invalidName) {\n        this.error = true;\n        return;\n      }\n\n      this.$emit(\"add:comment\", this.comment);\n      this.$refs.first.focus();\n      this.comment = {\n        name: \"\",\n        post: \"\"\n      };\n      this.clearStatus();\n      this.submitting = false;\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n\n    getData() {\n      axios.get(\"http://localhost:3000/comments\").then(response => {\n        this.users = response.data;\n        console.log(response);\n        this.comments = response.data;\n      });\n    },\n\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n        console.log(this.comment.id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment() {\n      try {\n        const response = await fetch('http://localhost:3000/comments', {\n          method: \"POST\",\n          body: JSON.stringify(this.comment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  },\n\n  mounted() {\n    this.getData();\n  }\n\n};","map":{"version":3,"mappings":"AAmDA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;EACbC,IAAI,EAAE,OADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IADL;MAELC,KAAK,EAAE,KAFF;MAGLC,UAAU,EAAE,KAHP;MAILC,OAAO,EAAE,KAJJ;MAKLC,OAAO,EAAE;QACPN,IAAI,EAAE,EADC;QAEPO,IAAI,EAAE;MAFC;IALJ,CAAP;EAUD,CAbY;;EAcfC,QAAQ,EAAE;IACNC,WAAW,GAAG;MACZ,OAAO,KAAKH,OAAL,CAAaN,IAAb,KAAsB,EAA7B;IACF;;EAHM,CAdK;EAmBbU,OAAO,EAAE;IACLC,YAAY,GAAG;MACf,KAAKC,WAAL;MACA,KAAKR,UAAL,GAAkB,IAAlB;;MAEF,IAAI,KAAKK,WAAT,EAAsB;QAClB,KAAKN,KAAL,GAAa,IAAb;QACA;MACF;;MAEA,KAAKU,KAAL,CAAW,aAAX,EAA0B,KAAKP,OAA/B;MACA,KAAKQ,KAAL,CAAWC,KAAX,CAAiBC,KAAjB;MACA,KAAKV,OAAL,GAAe;QACbN,IAAI,EAAE,EADO;QAEbO,IAAI,EAAE;MAFO,CAAf;MAKA,KAAKK,WAAL;MACA,KAAKR,UAAL,GAAkB,KAAlB;IACD,CAnBM;;IAqBPQ,WAAW,GAAG;MACZ,KAAKP,OAAL,GAAe,KAAf;MACA,KAAKF,KAAL,GAAa,KAAb;IACD,CAxBM;;IAyBPc,OAAO,GAAG;MACRlB,KAAK,CAACmB,GAAN,CAAU,gCAAV,EAA4CC,IAA5C,CAAkDC,QAAD,IAAc;QAC7D,KAAKC,KAAL,GAAaD,QAAQ,CAACnB,IAAtB;QACAqB,OAAO,CAACC,GAAR,CAAYH,QAAZ;QACA,KAAKlB,QAAL,GAAgBkB,QAAQ,CAACnB,IAAzB;MACD,CAJD;IAKD,CA/BM;;IAgCP,MAAMuB,aAAN,CAAoBC,EAApB,EAAwB;MACtB,IAAI;QACF,MAAMC,KAAK,CAAE,kCAAiCD,EAAG,EAAtC,EAAyC;UAClDE,MAAM,EAAE;QAD0C,CAAzC,CAAX;QAGA,KAAKzB,QAAL,GAAgB,KAAKA,QAAL,CAAc0B,MAAd,CAAsBtB,OAAD,IAAaA,OAAO,CAACmB,EAAR,KAAeA,EAAjD,CAAhB;QACAH,OAAO,CAACC,GAAR,CAAY,KAAKjB,OAAL,CAAamB,EAAzB;MACF,CANA,CAME,OAAOtB,KAAP,EAAc;QACdmB,OAAO,CAACnB,KAAR,CAAcA,KAAd;MACF;IACD,CA1CM;;IA4CP,MAAM0B,UAAN,GAAmB;MACjB,IAAI;QACF,MAAMT,QAAO,GAAI,MAAMM,KAAK,CAC1B,gCAD0B,EAE1B;UACEC,MAAM,EAAE,MADV;UAEEG,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAK1B,OAApB,CAFR;UAGE2B,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAF0B,CAA5B;QAQA,MAAMhC,IAAG,GAAI,MAAMmB,QAAQ,CAACc,IAAT,EAAnB;QACA,KAAKhC,QAAL,GAAgB,CAAC,GAAG,KAAKA,QAAT,EAAmBD,IAAnB,CAAhB;MACF,CAXA,CAWE,OAAOE,KAAP,EAAc;QACdmB,OAAO,CAACnB,KAAR,CAAcA,KAAd;MACF;IACD;;EA3DM,CAnBI;;EAgFbgC,OAAO,GAAG;IACR,KAAKlB,OAAL;EACD;;AAlFY,CAAf","names":["axios","name","data","comments","error","submitting","success","comment","post","computed","invalidName","methods","handleSubmit","clearStatus","$emit","$refs","first","focus","getData","get","then","response","users","console","log","deleteComment","id","fetch","method","filter","addComment","body","JSON","stringify","headers","json","mounted"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/components/Users.vue"],"sourcesContent":["<template>\n  <div>\n    <div id=\"comment-form\">\n      <form class=\"commentForm\" @submit.prevent=\"handleSubmit\">\n\n          <label>Name</label>\n        <input\n          ref=\"name\"\n          type=\"text\"\n          :class=\"{ 'has-error': submitting && invalidName }\"\n          v-model=\"comment.name\"\n          @focus=\"clearStatus\"\n          @keypress=\"clearStatus\"\n        />\n        <label>Comment</label>\n         <input\n          ref=\"post\"\n          type=\"text\"\n          :class=\"{ 'has-error': submitting && invalidName }\"\n          v-model=\"comment.post\"\n          @focus=\"clearStatus\"\n          @keypress=\"clearStatus\"\n        />\n        <p v-if=\"error && submitting\" class=\"error-message\">\n          ❗Please fill out all fields\n        </p>\n        <p v-if=\"success\" class=\"success-message\">\n          ✅ Comment successfully added\n        </p>\n        \n      </form>\n      <button v-on:click=\"addComment(comment.id)\" class=\"button--primary\">Add Comment</button>\n    </div>\n\n    <table class=\"commentPosts\" border=\"1px\">\n      <tr>\n        <td>name</td>\n        <td>post</td>\n        <td>action</td>\n      </tr>\n      <tr v-for=\"comment in comments\" v-bind:key=\"comment.id\">\n        <td>{{ comment.name }}</td>\n        <td>{{ comment.post }}</td>\n        <td><button v-on:click=\"deleteComment(comment.id)\"><img class=\"crudIcon\" src=\"../assets/icons/delete.png\" alt=\"delete\" /></button>\n        <button v-on:click=\"editComment(comment.id)\"><img class=\"crudIcon\" src=\"../assets/icons/edit.png\" alt=\"edit\" /></button></td>\n      </tr>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"Users\",\n  data() {\n    return {\n      comments: null,\n      error: false,\n      submitting: false,\n      success: false,\n      comment: {\n        name: \"\",\n        post: \"\"\n      }\n    };\n  },\ncomputed: {\n    invalidName() {\n      return this.comment.name === \"\";\n    }\n  },\n  methods: {\n      handleSubmit() {\n      this.clearStatus();\n      this.submitting = true;\n\n    if (this.invalidName) {\n        this.error = true;\n        return;\n      }\n\n      this.$emit(\"add:comment\", this.comment);\n      this.$refs.first.focus();\n      this.comment = {\n        name: \"\",\n        post: \"\"\n\n      };\n      this.clearStatus();\n      this.submitting = false;\n    },\n\n    clearStatus() {\n      this.success = false;\n      this.error = false;\n    },\n    getData() {\n      axios.get(\"http://localhost:3000/comments\").then((response) => {\n        this.users = response.data;\n        console.log(response);\n        this.comments = response.data;\n      });\n    },\n    async deleteComment(id) {\n      try {\n        await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"DELETE\",\n        });\n        this.comments = this.comments.filter((comment) => comment.id !== id);\n        console.log(this.comment.id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addComment() {\n      try {\n        const response = await fetch(\n          'http://localhost:3000/comments',\n          {\n            method: \"POST\",\n            body: JSON.stringify(this.comment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n  mounted() {\n    this.getData();\n  },\n};\n</script>\n\n<style scoped>\n\n.commentForm{\n    display: flex;\n    flex-direction: column;\n}\n\n.commentPosts {\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 50px;\n  margin-bottom: 100px;\n}\n\nbutton {\n    margin-right: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}