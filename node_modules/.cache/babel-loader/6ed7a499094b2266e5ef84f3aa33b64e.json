{"ast":null,"code":"import EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\"; // import CommentTable from \"@/components/CommentTable.vue\";\n// import CommentForm from \"@/components/CommentForm.vue\";\n\nimport Users from \"@/components/Users.vue\"; // const baseURL = \"http://localhost:3000/events\";\n// const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    // CommentForm,\n    // CommentTable,\n    Users\n  },\n\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n  methods: {\n    // async getEvents() {\n    //   try {\n    //     const response = await fetch(\n    //      \"http://localhost:3000/events\"\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //     );\n    //     const data = await response.json();\n    //     this.events = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async addEvent(event) {\n    //   try {\n    //     const response = await fetch(\n    //      'http://localhost:3000/events',\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //       {\n    //         method: \"POST\",\n    //         body: JSON.stringify(event),\n    //         headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.events = [...this.events, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async editEvent(id, updatedEvent) {\n    //   try {\n    //     const response = await fetch(\n    //       `http://localhost:3000/events/${id}`,\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //       {\n    //         method: \"PUT\",\n    //         body: JSON.stringify(updatedEvent),\n    //         headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.events = this.events.map(event =>\n    //       event.id === id ? data : event\n    //     );\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async deleteEvent(id) {\n    //   try {\n    //     await fetch(`http://localhost:3000/events/${id}`, {\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //       method: \"DELETE\"\n    //     });\n    //     this.events = this.events.filter(event => event.id !== id);\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    //  Comment form\n    //  async getComments() {\n    //   try {\n    //     const response = await fetch(\n    //       'http://localhost:3000/comments',\n    //     );\n    //     const data = await response.json();\n    //     this.comments = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    // async addComment(comment) {\n    //   try {\n    //     const response = await fetch(\n    //       'http://localhost:3000/comments',\n    //       {\n    //         method: \"POST\",\n    //         body: JSON.stringify(comment),\n    //         headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.comments = [...this.comments, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(`http://localhost:3000/comments/${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(updatedComment),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = this.comments.map(comment => comment.id === id ? data : comment);\n      } catch (error) {\n        console.error(error);\n      }\n    } // async deleteComment(id) {\n    //   try {\n    //     await fetch(`http://localhost:3000/comments/${id}`, {\n    //       method: \"DELETE\"\n    //     });\n    //     this.comments = this.comments.filter(comment => comment.id !== id);\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // }\n\n\n  }\n};","map":{"version":3,"mappings":"AAgCA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,UAAP,MAAuB,6BAAvB,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,wBAAlB,C,CACA;AACA;;AAEA,eAAe;EACbC,IAAI,EAAE,KADO;EAEbC,UAAU,EAAE;IACVJ,SADU;IAEVC,UAFU;IAGV;IACA;IACAC;EALU,CAFC;;EASbG,IAAI,GAAG;IACL,OAAO;MACLC,MAAM,EAAE,EADH;MAELC,QAAQ,EAAE;IAFL,CAAP;EAID,CAdY;;EAgBbC,OAAO,GAAG;IACR,KAAKC,SAAL;IACA,KAAKC,WAAL;EACD,CAnBY;;EAqBdC,OAAO,EAAE;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEJ;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,MAAMC,WAAN,CAAkBC,EAAlB,EAAsBC,cAAtB,EAAsC;MACpC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CACzB,kCAAiCH,EAAG,EADX,EAE1B;UACEI,MAAM,EAAE,KADV;UAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,cAAf,CAFR;UAGEO,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAF0B,CAA5B;QAQA,MAAMhB,IAAG,GAAI,MAAMU,QAAQ,CAACO,IAAT,EAAnB;QACA,KAAKf,QAAL,GAAgB,KAAKA,QAAL,CAAcgB,GAAd,CAAkBC,OAAM,IACtCA,OAAO,CAACX,EAAR,KAAeA,EAAf,GAAoBR,IAApB,GAA2BmB,OADb,CAAhB;MAGF,CAbA,CAaE,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CApHK,CAsHN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;EA/HM;AArBK,CAAf","names":["EventForm","EventTable","Users","name","components","data","events","comments","mounted","getEvents","getComments","methods","editComment","id","updatedComment","response","fetch","method","body","JSON","stringify","headers","json","map","comment","error","console"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/views/CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\n<!--Functionality to be tested by Justina Ho-->\n<template>\n  <div class=\"create\">\n    <event-form @add:event=\"addEvent\"/>\n    <event-table\n      class=\"displayCenter\"\n      :events=\"events\"\n      @delete:event=\"deleteEvent\"\n      @edit:event=\"editEvent\"\n      @comment:event=\"commentEvent\"\n    />\n  </div>\n    <div id=\"app\" class=\"small-container\">\n    <h2 class=\"title--secondary\">Comments</h2>\n\n    <comment-form @add:comment=\"addComment\"/>\n            <Users/>\n    <comment-table\n      :comments=\"comments\"\n      @delete:comment=\"deleteComment\"\n      @edit:comment=\"editComment\"\n    />\n  </div>\n\n</template>\n\n<style>\n@import \"../assets/styles/main.css\";\n</style>\n\n<script>\nimport EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\";\n// import CommentTable from \"@/components/CommentTable.vue\";\n// import CommentForm from \"@/components/CommentForm.vue\";\nimport Users from \"@/components/Users.vue\";\n// const baseURL = \"http://localhost:3000/events\";\n// const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    // CommentForm,\n    // CommentTable,\n    Users\n  },\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n methods: {\n\n    // async getEvents() {\n    //   try {\n    //     const response = await fetch(\n    //      \"http://localhost:3000/events\"\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //     );\n    //     const data = await response.json();\n    //     this.events = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n\n    // async addEvent(event) {\n    //   try {\n    //     const response = await fetch(\n    //      'http://localhost:3000/events',\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //       {\n    //         method: \"POST\",\n    //         body: JSON.stringify(event),\n    //         headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.events = [...this.events, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n\n    // async editEvent(id, updatedEvent) {\n    //   try {\n    //     const response = await fetch(\n    //       `http://localhost:3000/events/${id}`,\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //       {\n    //         method: \"PUT\",\n    //         body: JSON.stringify(updatedEvent),\n    //         headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.events = this.events.map(event =>\n    //       event.id === id ? data : event\n    //     );\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n\n    // async deleteEvent(id) {\n    //   try {\n    //     await fetch(`http://localhost:3000/events/${id}`, {\n    //       /*This is where our own API data will go*/\n    //       /*Use of the JSON https API created by Justina*/\n    //       method: \"DELETE\"\n    //     });\n    //     this.events = this.events.filter(event => event.id !== id);\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n    \n//  Comment form\n    //  async getComments() {\n    //   try {\n    //     const response = await fetch(\n    //       'http://localhost:3000/comments',\n    //     );\n    //     const data = await response.json();\n    //     this.comments = data;\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n\n    // async addComment(comment) {\n    //   try {\n    //     const response = await fetch(\n    //       'http://localhost:3000/comments',\n    //       {\n    //         method: \"POST\",\n    //         body: JSON.stringify(comment),\n    //         headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n    //       }\n    //     );\n    //     const data = await response.json();\n    //     this.comments = [...this.comments, data];\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // },\n\n    async editComment(id, updatedComment) {\n      try {\n        const response = await fetch(\n          `http://localhost:3000/comments/${id}`,\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedComment),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = this.comments.map(comment =>\n          comment.id === id ? data : comment\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    // async deleteComment(id) {\n    //   try {\n    //     await fetch(`http://localhost:3000/comments/${id}`, {\n    //       method: \"DELETE\"\n    //     });\n    //     this.comments = this.comments.filter(comment => comment.id !== id);\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // }\n\n  }\n}; \n</script>"]},"metadata":{},"sourceType":"module"}