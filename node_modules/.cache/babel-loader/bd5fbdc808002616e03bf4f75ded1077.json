{"ast":null,"code":"import EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\";\nimport CommentTable from \"@/components/CommentTable.vue\";\nimport CommentForm from \"@/components/CommentForm.vue\";\nconst baseURL = \"http://localhost:3000/events\"; // const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    CommentForm,\n    CommentTable\n  },\n\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(baseURL\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(baseURL,\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"POST\",\n          body: JSON.stringify(event),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`,\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"PUT\",\n          body: JSON.stringify(updatedEvent),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = this.events.map(event => event.id === id ? data : event);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          /*This is where our own API data will go*/\n\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\"\n        });\n        this.events = this.events.filter(event => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    //  Comment form\n    async getComments() {\n      try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n        const data = await response.json();\n        this.comments = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEmployee(employee) {\n      try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n          method: \"POST\",\n          body: JSON.stringify(employee),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEmployee(id, updatedEmployee) {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(updatedEmployee),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.comments = this.comments.map(employee => employee.id === id ? data : employee);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEmployee(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["EventForm","EventTable","CommentTable","CommentForm","baseURL","name","components","data","events","comments","mounted","getEvents","getComments","methods","response","fetch","json","error","console","addEvent","event","method","body","JSON","stringify","headers","editEvent","id","updatedEvent","map","deleteEvent","filter","addEmployee","employee","editEmployee","updatedEmployee","deleteEmployee","comment"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/views/CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\n<!--Functionality to be tested by Justina Ho-->\n<template>\n  <div class=\"create\">\n    <event-form @add:event=\"addEvent\"/>\n    <event-table\n      class=\"displayCenter\"\n      :events=\"events\"\n      @delete:event=\"deleteEvent\"\n      @edit:event=\"editEvent\"\n      @comment:event=\"commentEvent\"\n    />\n  </div>\n\n    <div id=\"app\" class=\"small-container\">\n    <h1>Comments</h1>\n\n    <comment-form @add:comment=\"addComment\"/>\n    <comment-table\n      :comments=\"comments\"\n      @delete:employee=\"deleteEmployee\"\n      @edit:employee=\"editEmployee\"\n    />\n  </div>\n\n</template>\n\n<style>\n@import \"../assets/styles/main.css\";\n</style>\n\n<script>\nimport EventForm from \"@/components/EventForm.vue\";\nimport EventTable from \"@/components/EventTable.vue\";\nimport CommentTable from \"@/components/CommentTable.vue\";\nimport CommentForm from \"@/components/CommentForm.vue\";\nconst baseURL = \"http://localhost:3000/events\";\n// const commentURL = \"http://localhost:3000/comments\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm,\n    EventTable,\n    CommentForm,\n    CommentTable\n  },\n  data() {\n    return {\n      events: [],\n      comments: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n    this.getComments();\n  },\n\n methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\n          baseURL\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\n          baseURL,\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n          {\n            method: \"POST\",\n            body: JSON.stringify(event),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedEvent),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = this.events.map(event =>\n          event.id === id ? data : event\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          /*This is where our own API data will go*/\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\"\n        });\n        this.events = this.events.filter(event => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    \n//  Comment form\n     async getComments() {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\"\n        );\n        const data = await response.json();\n        this.comments = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEmployee(employee) {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\",\n          {\n            method: \"POST\",\n            body: JSON.stringify(employee),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = [...this.comments, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEmployee(id, updatedEmployee) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedEmployee),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.comments = this.comments.map(employee =>\n          employee.id === id ? data : employee\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEmployee(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          method: \"DELETE\"\n        });\n        this.comments = this.comments.filter(comment => comment.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}; \n</script>\n<style>\nbutton {\n  background: #009435;\n  border: 1px solid #009435;\n}\n\nbutton:hover,\nbutton:active,\nbutton:focus {\n  background: #32a95d;\n  border: 1px solid #32a95d;\n}\n\n.small-container {\n  max-width: 680px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}