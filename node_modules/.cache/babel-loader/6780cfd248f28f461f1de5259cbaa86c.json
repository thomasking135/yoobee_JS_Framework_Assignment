{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/images/createEvent.jpg';\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"title center\"\n}, \"Create Event\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"overlayLandingImg\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"landingImg\",\n  src: _imports_0,\n  alt: \"Landing page\"\n})], -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = {\n  class: \"create\"\n};\nconst _hoisted_4 = {\n  id: \"app\",\n  class: \"small-container\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"title--secondary\"\n}, \"Comments\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_event_form = _resolveComponent(\"event-form\");\n\n  const _component_event_table = _resolveComponent(\"event-table\");\n\n  const _component_comment_form = _resolveComponent(\"comment-form\");\n\n  const _component_Users = _resolveComponent(\"Users\");\n\n  const _component_comment_table = _resolveComponent(\"comment-table\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2, _createCommentVNode(\"Event form and table start\"), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_event_form, {\n    \"onAdd:event\": $options.addEvent\n  }, null, 8\n  /* PROPS */\n  , [\"onAdd:event\"]), _createVNode(_component_event_table, {\n    class: \"displayCenter\",\n    events: $data.events,\n    \"onDelete:event\": $options.deleteEvent,\n    \"onEdit:event\": $options.editEvent,\n    \"onComment:event\": _ctx.commentEvent\n  }, null, 8\n  /* PROPS */\n  , [\"events\", \"onDelete:event\", \"onEdit:event\", \"onComment:event\"])]), _createCommentVNode(\"Comments section\"), _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createVNode(_component_comment_form, {\n    \"onAdd:comment\": $options.addComment\n  }, null, 8\n  /* PROPS */\n  , [\"onAdd:comment\"]), _createVNode(_component_Users), _createVNode(_component_comment_table, {\n    comments: $data.comments,\n    \"onDelete:comment\": $options.deleteComment,\n    \"onEdit:comment\": $options.editComment\n  }, null, 8\n  /* PROPS */\n  , [\"comments\", \"onDelete:comment\", \"onEdit:comment\"])])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";OAOMA,gBAAsC;;gCAJ1CC,oBAA0C,IAA1C,EAA0C;EAAtCC,KAAK,EAAC;AAAgC,CAA1C,EAAyB,cAAzB,EAAqC;AAAA;AAArC;;gCACCD,oBAMK,KANL,EAMK;EANAC,KAAK,EAAC;AAMN,CANL,EAA8B,cAC7BD,oBAIE,KAJF,EAIE;EAHAC,KAAK,EAAC,YAGN;EAFAC,GAAsC,EAAtCH,UAEA;EADAI,GAAG,EAAC;AACJ,CAJF,CAD6B,CAA9B;;AAAA;;;EASIF,KAAK,EAAC;;;EAYJG,EAAE,EAAC;EAAMH,KAAK,EAAC;;;gCACpBD,oBAA0C,IAA1C,EAA0C;EAAtCC,KAAK,EAAC;AAAgC,CAA1C,EAA6B,UAA7B,EAAqC;AAAA;AAArC;;;;;;;;;;;;;6DAvBFI,YACCC,YAQDC,mDACAP,oBASM,KATN,cASM,CARJQ,aAAmCC,qBAAnC,EAAmC;IAAtB,eAAWC;EAAW,CAAnC,EAAgC,IAAhC,EAAgC;EAAA;EAAhC,EAAgC,eAAhC,CAQI,EAPJF,aAMEG,sBANF,EAME;IALAV,KAAK,EAAC,eAKN;IAJCW,MAAM,EAAEC,YAIT;IAHC,kBAAcH,oBAGf;IAFC,gBAAYA,kBAEb;IADC,mBAAeI;EAChB,CANF;;EAAA,kEAOI,CATN,GAWAP,yCACEP,oBASI,KATJ,cASI,CARJe,UAQI,EAPJP,aAAyCQ,uBAAzC,EAAyC;IAA1B,iBAAaN;EAAa,CAAzC,EAAsC,IAAtC,EAAsC;EAAA;EAAtC,EAAsC,iBAAtC,CAOI,EANIF,aAAQS,gBAAR,CAMJ,EALJT,aAIEU,wBAJF,EAIE;IAHCC,QAAQ,EAAEN,cAGX;IAFC,oBAAgBH,sBAEjB;IADC,kBAAcA;EACf,CAJF;;EAAA,qDAKI,CATJ","names":["_imports_0","_createElementVNode","class","src","alt","id","_hoisted_1","_hoisted_2","_createCommentVNode","_createVNode","_component_event_form","$options","_component_event_table","events","$data","_ctx","_hoisted_5","_component_comment_form","_component_Users","_component_comment_table","comments"],"sourceRoot":"","sources":["C:\\yoobee_JS_Framework_Assignment\\src\\views\\CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\r\n<!--Functionality to be tested by Justina Ho-->\r\n<template>\r\n  <h1 class=\"title center\">Create Event</h1>\r\n   <div class=\"overlayLandingImg\">\r\n    <img\r\n      class=\"landingImg\"\r\n      src=\"../assets/images/createEvent.jpg\"\r\n      alt=\"Landing page\"\r\n    />\r\n  </div>\r\n\r\n  <!--Event form and table start-->\r\n  <div class=\"create\">\r\n    <event-form @add:event=\"addEvent\"/>\r\n    <event-table\r\n      class=\"displayCenter\"\r\n      :events=\"events\"\r\n      @delete:event=\"deleteEvent\"\r\n      @edit:event=\"editEvent\"\r\n      @comment:event=\"commentEvent\"\r\n    />\r\n  </div>\r\n\r\n  <!--Comments section-->\r\n    <div id=\"app\" class=\"small-container\">\r\n    <h2 class=\"title--secondary\">Comments</h2>\r\n    <comment-form @add:comment=\"addComment\"/>\r\n            <Users/>\r\n    <comment-table\r\n      :comments=\"comments\"\r\n      @delete:comment=\"deleteComment\"\r\n      @edit:comment=\"editComment\"\r\n    />\r\n  </div>\r\n\r\n</template>\r\n\r\n<style>\r\n@import \"../assets/styles/main.css\";\r\n</style>\r\n\r\n<script>\r\nimport EventForm from \"@/components/EventForm.vue\";\r\nimport EventTable from \"@/components/EventTable.vue\";\r\n// import CommentTable from \"@/components/CommentTable.vue\";\r\n// import CommentForm from \"@/components/CommentForm.vue\";\r\nimport Users from \"@/components/Users.vue\";\r\n// const baseURL = \"http://localhost:3000/events\";\r\n// const commentURL = \"http://localhost:3000/comments\";\r\n\r\nexport default {\r\n  name: \"app\",\r\n  components: {\r\n    EventForm,\r\n    EventTable,\r\n    // CommentForm,\r\n    // CommentTable,\r\n    Users\r\n  },\r\n  data() {\r\n    return {\r\n      events: [],\r\n      comments: []\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.getEvents();\r\n    this.getComments();\r\n  },\r\n\r\n methods: {\r\n\r\n    async getEvents() {\r\n      try {\r\n        const response = await fetch(\r\n         \"http://localhost:3000/events\"\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n        );\r\n        const data = await response.json();\r\n        this.events = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addEvent(event) {\r\n      try {\r\n        const response = await fetch(\r\n         'http://localhost:3000/events',\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(event),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = [...this.events, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editEvent(id, updatedEvent) {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3000/events/${id}`,\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedEvent),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = this.events.map(event =>\r\n          event.id === id ? data : event\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteEvent(id) {\r\n      try {\r\n        await fetch(`http://localhost:3000/events/${id}`, {\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          method: \"DELETE\"\r\n        });\r\n        this.events = this.events.filter(event => event.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    \r\n//  Comment form\r\n     async getComments() {\r\n      try {\r\n        const response = await fetch(\r\n          'http://localhost:3000/comments',\r\n        );\r\n        const data = await response.json();\r\n        this.comments = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addComment(comment) {\r\n      try {\r\n        const response = await fetch(\r\n          'http://localhost:3000/comments',\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(comment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = [...this.comments, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editComment(id, updatedComment) {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3000/comments/${id}`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedComment),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.comments = this.comments.map(comment =>\r\n          comment.id === id ? data : comment\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteComment(id) {\r\n      try {\r\n        await fetch(`http://localhost:3000/comments/${id}`, {\r\n          method: \"DELETE\"\r\n        });\r\n        this.comments = this.comments.filter(comment => comment.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n  }\r\n}; \r\n</script>"]},"metadata":{},"sourceType":"module"}