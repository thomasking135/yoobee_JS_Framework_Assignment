{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"create\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_event_form = _resolveComponent(\"event-form\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_event_form, {\n    \"onAdd:event\": $options.addEvent\n  }, null, 8\n  /* PROPS */\n  , [\"onAdd:event\"])]);\n}","map":{"version":3,"mappings":";;EAGSA,KAAK,EAAC;;;;;uBAAXC,oBAIM,KAJN,cAIM,CAFNC,aAAmCC,qBAAnC,EAAmC;IAAtB,eAAWC;EAAW,CAAnC,EAAgC,IAAhC,EAAgC;EAAA;EAAhC,EAAgC,eAAhC,CAEM,CAJN","names":["class","_createElementBlock","_createVNode","_component_event_form","$options"],"sourceRoot":"","sources":["/Users/justinaho1996/yoobee_JS_Framework_Assignment/src/views/CreateEvent.vue"],"sourcesContent":["<!--Thomas to update functionality-->\n<template>\n\n    <div class=\"create\">\n      \n    <event-form @add:event=\"addEvent\"/>\n\n    </div>\n\n   \n  \n  </template>\n  \n  <script>\n  import EventForm from \"@/components/EventForm.vue\";\n\nexport default {\n  name: \"app\",\n  components: {\n    EventForm\n  },\n  data() {\n    return {\n      events: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\"\n          /*This is where our own API data will go*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\",\n          /*This is where our own API data will go*/\n          {\n            method: \"POST\",\n            body: JSON.stringify(event),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          /*This is where our own API data will go*/\n          {\n            method: \"PUT\",\n            body: JSON.stringify(updatedEvent),\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\n          }\n        );\n        const data = await response.json();\n        this.events = this.events.map(event =>\n          event.id === id ? data : event\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          /*This is where our own API data will go*/\n          method: \"DELETE\"\n        });\n        this.employees = this.employees.filter(employee => employee.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}; \n  </script>\n  \n  <style>\n  @import '../assets/styles/main.css';\n  .formBorder{\n  border: 2px solid blue; \n  margin-top: 10%;\n  display: inline-block;\n  padding-left: 15%;\n  padding-right: 15%;\n  padding-top: 1%;\n  padding-bottom: 1%; \n}\n\n\n\n#address{\n  width: 353px;\n}\n\n#category, #privacy {\n  width: 360px;\n}\n\n#description{\n  border: 2px solid blue; \n  display: inline-block;\n  padding-left: 14%;\n  padding-right: 14.6%;\n  padding-top: 1%;\n  padding-bottom: 1%; \n}\n\n.postit {\n  width: 100px;\n  height: 30px;\n  float: right;\n  margin-left: 10px;\n}\n\n.postit:hover {\n  transform: scale(1.1);\n  background-color: #06bdb6;\n}\n\n.cancelit {\n  width: 100px;\n  height: 30px;\n  float: right;\n  color: red;\n  border: 2px solid red;\n}\n\n.cancelit:hover {\n  transform: scale(1.1);\n  background-color: red;\n  color: white\n}\n  </style>"]},"metadata":{},"sourceType":"module"}