{"ast":null,"code":"export default {\n  name: \"app\",\n  components: {\n    ProfileForm,\n    EventTable\n  },\n\n  data() {\n    return {\n      events: []\n    };\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\"\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        );\n        const data = await response.json();\n        this.events = data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async addEvent(event) {\n      try {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/users\",\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"POST\",\n          body: JSON.stringify(event),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = [...this.events, data];\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async editEvent(id, updatedEvent) {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`,\n        /*This is where our own API data will go*/\n\n        /*Use of the JSON https API created by Justina*/\n        {\n          method: \"PUT\",\n          body: JSON.stringify(updatedEvent),\n          headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n          }\n        });\n        const data = await response.json();\n        this.events = this.events.map(event => event.id === id ? data : event);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async deleteEvent(id) {\n      try {\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\n          /*This is where our own API data will go*/\n\n          /*Use of the JSON https API created by Justina*/\n          method: \"DELETE\"\n        });\n        this.events = this.events.filter(event => event.id !== id);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAyBE,eAAe;EACfA,IAAI,EAAE,KADS;EAEfC,UAAU,EAAE;IACVC,WADU;IAEVC;EAFU,CAFG;;EAMfC,IAAI,GAAG;IACL,OAAO;MACLC,MAAM,EAAE;IADH,CAAP;EAGD,CAVc;;EAYfC,OAAO,GAAG;IACR,KAAKC,SAAL;EACD,CAdc;;EAgBfC,OAAO,EAAE;IACP,MAAMD,SAAN,GAAkB;MAChB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAC1B;QACA;;QACA;QAH0B,CAA5B;QAKA,MAAMN,IAAG,GAAI,MAAMK,QAAQ,CAACE,IAAT,EAAnB;QACA,KAAKN,MAAL,GAAcD,IAAd;MACF,CARA,CAQE,OAAOQ,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CAbM;;IAeP,MAAME,QAAN,CAAeC,KAAf,EAAsB;MACpB,IAAI;QACF,MAAMN,QAAO,GAAI,MAAMC,KAAK,CAC1B,4CAD0B;QAE1B;;QACA;QACA;UACEM,MAAM,EAAE,MADV;UAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAFR;UAGEK,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAJ0B,CAA5B;QAUA,MAAMhB,IAAG,GAAI,MAAMK,QAAQ,CAACE,IAAT,EAAnB;QACA,KAAKN,MAAL,GAAc,CAAC,GAAG,KAAKA,MAAT,EAAiBD,IAAjB,CAAd;MACF,CAbA,CAaE,OAAOQ,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CAhCM;;IAkCP,MAAMS,SAAN,CAAgBC,EAAhB,EAAoBC,YAApB,EAAkC;MAChC,IAAI;QACF,MAAMd,QAAO,GAAI,MAAMC,KAAK,CACzB,8CAA6CY,EAAG,EADvB;QAE1B;;QACA;QACA;UACEN,MAAM,EAAE,KADV;UAEEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeI,YAAf,CAFR;UAGEH,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QAHX,CAJ0B,CAA5B;QAUA,MAAMhB,IAAG,GAAI,MAAMK,QAAQ,CAACE,IAAT,EAAnB;QACA,KAAKN,MAAL,GAAc,KAAKA,MAAL,CAAYmB,GAAZ,CAAgBT,KAAI,IAChCA,KAAK,CAACO,EAAN,KAAaA,EAAb,GAAkBlB,IAAlB,GAAyBW,KADb,CAAd;MAGF,CAfA,CAeE,OAAOH,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACD,CArDM;;IAuDP,MAAMa,WAAN,CAAkBH,EAAlB,EAAsB;MACpB,IAAI;QACF,MAAMZ,KAAK,CAAE,8CAA6CY,EAAG,EAAlD,EAAqD;UAC9D;;UACA;UACAN,MAAM,EAAE;QAHsD,CAArD,CAAX;QAKA,KAAKX,MAAL,GAAc,KAAKA,MAAL,CAAYqB,MAAZ,CAAmBX,KAAI,IAAKA,KAAK,CAACO,EAAN,KAAaA,EAAzC,CAAd;MACF,CAPA,CAOE,OAAOV,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;MACF;IACF;;EAlEO;AAhBM,CAAf","names":["name","components","ProfileForm","EventTable","data","events","mounted","getEvents","methods","response","fetch","json","error","console","addEvent","event","method","body","JSON","stringify","headers","editEvent","id","updatedEvent","map","deleteEvent","filter"],"sourceRoot":"","sources":["C:\\yoobee_JS_Framework_Assignment\\src\\views\\ProfileView.vue"],"sourcesContent":["<template>\r\n  \r\n  <body>\r\n  <div id=\"app\">\r\n    <div>\r\n      <div class=\"file-upload-form\">\r\n        Upload an image file:\r\n        <input type=\"file\" @change=\"previewImage\" accept=\"image/*\">\r\n      </div>\r\n      <div class=\"image-preview\" v-if=\"imageData.length > 0\">\r\n        <img class=\"preview\" :src=\"imageData\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</body>\r\n\r\n</template>\r\n\r\n\r\n\r\n<style>\r\n@import '../assets/styles/main.css';\r\n</style>\r\n\r\n<script>\r\n  export default {\r\n  name: \"app\",\r\n  components: {\r\n    ProfileForm,\r\n    EventTable\r\n  },\r\n  data() {\r\n    return {\r\n      events: []\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.getEvents();\r\n  },\r\n\r\n  methods: {\r\n    async getEvents() {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://jsonplaceholder.typicode.com/users\"\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n        );\r\n        const data = await response.json();\r\n        this.events = data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async addEvent(event) {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://jsonplaceholder.typicode.com/users\",\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(event),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = [...this.events, data];\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async editEvent(id, updatedEvent) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://jsonplaceholder.typicode.com/users/${id}`,\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(updatedEvent),\r\n            headers: { \"Content-type\": \"application/json; charset=UTF-8\" }\r\n          }\r\n        );\r\n        const data = await response.json();\r\n        this.events = this.events.map(event =>\r\n          event.id === id ? data : event\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async deleteEvent(id) {\r\n      try {\r\n        await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {\r\n          /*This is where our own API data will go*/\r\n          /*Use of the JSON https API created by Justina*/\r\n          method: \"DELETE\"\r\n        });\r\n        this.events = this.events.filter(event => event.id !== id);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n}; \r\n</script>\r\n\r\n//import { change } from \"../assets/JS/views.js\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}